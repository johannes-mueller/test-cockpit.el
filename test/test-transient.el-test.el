(require 'mocker)
(require 'test-cockpit-transient)

(ert-deftest test-selection-variable-init-nil ()
  (let ((foo-variable nil))
    (transient-define-infix foo-infix ()
     :class 'test-cockpit--transient--selection
     :variable 'foo-variable)
    (let ((obj (plist-get (symbol-plist 'foo-infix) 'transient--suffix)))
      (transient-init-value obj)
      (should (equal (oref obj value) nil)))))

(ert-deftest test-selection-variable-init-non-nil ()
  (let ((foo-variable '("foo")))
    (transient-define-infix foo-infix ()
     :class 'test-cockpit--transient--selection
     :variable 'foo-variable)
    (let ((obj (plist-get (symbol-plist 'foo-infix) 'transient--suffix)))
      (transient-init-value obj)
      (should (equal (oref obj value) '("foo"))))))

(defun dummy-choices () '("foo" "bar" "baz"))

(ert-deftest test-selection-variable-read ()
  (let ((foo-variable nil))
    (transient-define-infix foo-infix ()
     :class 'test-cockpit--transient--selection
     :prompt "choicename: "
     :choices 'dummy-choices
     :variable 'foo-variable)
    (let ((obj (plist-get (symbol-plist 'foo-infix) 'transient--suffix)))
      (mocker-let
          ((transient--show () ((:output nil)))
           (completing-read (prompt choices)
                            ((:input '("choicename: " ("foo" "bar" "baz")) :output "bar"))))
        (should (equal (transient-infix-read obj) "bar"))))))

(ert-deftest test-selection-variable-set ()
  (let ((foo-variable nil))
    (transient-define-infix foo-infix ()
     :class 'test-cockpit--transient--selection
     :variable 'foo-variable)
    (let ((obj (plist-get (symbol-plist 'foo-infix) 'transient--suffix)))
      (transient-infix-set obj "foo")
      (should (equal foo-variable '("foo")))
      (should (equal foo-variable (oref obj value)))
      (transient-infix-set obj "bar")
      (should (equal foo-variable '("foo" "bar")))
      (should (equal foo-variable (oref obj value)))
      (transient-infix-set obj "bar")
      (should (equal foo-variable '("foo")))
      (should (equal foo-variable (oref obj value))))))

(ert-deftest test-selection-variable-format ()
    (transient-define-infix foo-infix ()
     :class 'test-cockpit--transient--selection
     :choices 'dummy-choices)
    (let ((obj (plist-get (symbol-plist 'foo-infix) 'transient--suffix)))
      (oset obj value nil)
      (let* ((str (transient-format-value obj)))
        (should (eq (get-text-property  0 'face str) 'transient-inactive-value))
        (should (eq (get-text-property  1 'face str) 'transient-inactive-value))
        (should (eq (get-text-property  5 'face str) 'transient-inactive-value))
        (should (eq (get-text-property  6 'face str) 'transient-inactive-value))
        (should (eq (get-text-property 10 'face str) 'transient-inactive-value))
        (should (eq (get-text-property 11 'face str) 'transient-inactive-value))
        (should (eq (get-text-property 14 'face str) 'transient-inactive-value))
        (remove-text-properties 0 (length str) '(face nil) str)
        (should (equal str "[foo, bar, baz]")))
      (oset obj value '("bar"))
      (let* ((str (transient-format-value obj)))
        (should (eq (get-text-property  0 'face str) 'transient-inactive-value))
        (should (eq (get-text-property  1 'face str) 'transient-inactive-value))
        (should (eq (get-text-property  5 'face str) 'transient-inactive-value))
        (should (eq (get-text-property  6 'face str) 'transient-value))
        (should (eq (get-text-property 10 'face str) 'transient-inactive-value))
        (should (eq (get-text-property 11 'face str) 'transient-inactive-value))
        (should (eq (get-text-property 14 'face str) 'transient-inactive-value))
        (remove-text-properties 0 (length str) '(face nil) str)
        (should (equal str "[foo, bar, baz]")))
      (oset obj value '("baz" "foo"))
      (let* ((str (transient-format-value obj)))
        (should (eq (get-text-property  0 'face str) 'transient-inactive-value))
        (should (eq (get-text-property  1 'face str) 'transient-value))
        (should (eq (get-text-property  5 'face str) 'transient-inactive-value))
        (should (eq (get-text-property  6 'face str) 'transient-inactive-value))
        (should (eq (get-text-property 10 'face str) 'transient-inactive-value))
        (should (eq (get-text-property 11 'face str) 'transient-value))
        (should (eq (get-text-property 14 'face str) 'transient-inactive-value))
        (remove-text-properties 0 (length str) '(face nil) str)
        (should (equal str "[foo, bar, baz]")))
      ))


;;; test-rust.el-test.el ends here
